package wire

import (
	"crypto/cipher"
	"errors"
)

var ErrUnauthorizedUser = errors.New("Unauthorized user")

type Conversation string

const (
	UserNameRequest                Conversation = "USER_NAME"
	FileTransferInformationRequest Conversation = "REQUEST_FILE_TRANSFER_INFORMATION"
	FileTransferStart              Conversation = "FILE_TRANSFER_START"
	FileTransferSuccess            Conversation = "FILE_TRANSFER_SUCCESS"
	FileTransferFail               Conversation = "FILE_TRANSFER_FAIL"
)

// SymmetricEncryptionParms contains values used for AES encryption
// that are generated by server
type SymmetricEncryptionParms struct {
	Block                cipher.Block
	InitializationVector []byte
	ClientAck            bool
}

type AuthorizationCode int

const (
	Authorized AuthorizationCode = iota
	PasswordRequired
	NonexistantUser
	IncorrectPassword
)

// UserAuthorizationResponse indicated if user is authorized or not
type UserAuthorizationResponse struct {
	AuthResponse AuthorizationCode
	Description  string
}

type TransferType int

const (
	FileSend TransferType = iota
	FileReceive
)

type FileTransferInformationResponse struct {
	FileTransferType TransferType
	FileName         string
	FileSize         int64
}
